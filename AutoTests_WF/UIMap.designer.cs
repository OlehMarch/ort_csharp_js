// ------------------------------------------------------------------------------
//  <auto-generated>
//      Этот код был создан построителем кодированных тестов ИП.
//      Версия: 14.0.0.0
//
//      Изменения, внесенные в этот файл, могут привести к неправильной работе кода и будут
//      утрачены при повторном формировании кода.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UIT_Task2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public partial class UIMap2
    {
        
        /// <summary>
        /// 123 + 123 = 246
        /// </summary>
        public void WF_Plus()
        {
            #region Variable Declarations
            WinButton uIItem1Button = this.UICalculator20Window.UIItem1Window.UIItem1Button;
            WinButton uIItem2Button = this.UICalculator20Window.UIItem2Window.UIItem2Button;
            WinButton uIItem3Button = this.UICalculator20Window.UIItem3Window.UIItem3Button;
            WinButton uIItemButton = this.UICalculator20Window.UIItemWindow.UIItemButton;
            WinButton uIItemButton1 = this.UICalculator20Window.UIItemWindow1.UIItemButton;
            #endregion

            // Щелкните "1" кнопка
            Mouse.Click(uIItem1Button, new Point(30, 40));

            // Щелкните "2" кнопка
            Mouse.Click(uIItem2Button, new Point(23, 51));

            // Щелкните "3" кнопка
            Mouse.Click(uIItem3Button, new Point(29, 58));

            // Щелкните "+" кнопка
            Mouse.Click(uIItemButton, new Point(43, 45));

            // Щелкните "1" кнопка
            Mouse.Click(uIItem1Button, new Point(69, 35));

            // Щелкните "2" кнопка
            Mouse.Click(uIItem2Button, new Point(51, 48));

            // Щелкните "3" кнопка
            Mouse.Click(uIItem3Button, new Point(70, 47));

            // Щелкните "=" кнопка
            Mouse.Click(uIItemButton1, new Point(55, 59));
        }
        
        /// <summary>
        /// VerifyResult_Plus - Используйте "VerifyResult_PlusExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void VerifyResult_Plus()
        {
            #region Variable Declarations
            WinEdit uITB_ResultEdit = this.UICalculator20Window.UIItem0Window.UITB_ResultEdit;
            #endregion

            // Убедитесь, что свойство Text "TB_Result" надпись равняется "246"
            Assert.AreEqual(this.VerifyResult_PlusExpectedValues.UITB_ResultEditText, uITB_ResultEdit.Text, "Wrong result!");
        }
        
        /// <summary>
        /// 89 - 23 = 66
        /// </summary>
        public void WF_Minus()
        {
            #region Variable Declarations
            WinButton uIItem8Button = this.UICalculator20Window.UIItem8Window.UIItem8Button;
            WinButton uIItem9Button = this.UICalculator20Window.UIItem9Window.UIItem9Button;
            WinButton uIItemButton = this.UICalculator20Window.UIItemWindow2.UIItemButton;
            WinButton uIItem2Button = this.UICalculator20Window.UIItem2Window.UIItem2Button;
            WinButton uIItem3Button = this.UICalculator20Window.UIItem3Window.UIItem3Button;
            WinButton uIItemButton1 = this.UICalculator20Window.UIItemWindow1.UIItemButton;
            #endregion

            // Щелкните "8" кнопка
            Mouse.Click(uIItem8Button, new Point(62, 42));

            // Щелкните "9" кнопка
            Mouse.Click(uIItem9Button, new Point(7, 46));

            // Щелкните "-" кнопка
            Mouse.Click(uIItemButton, new Point(50, 49));

            // Щелкните "2" кнопка
            Mouse.Click(uIItem2Button, new Point(48, 52));

            // Щелкните "3" кнопка
            Mouse.Click(uIItem3Button, new Point(59, 47));

            // Щелкните "=" кнопка
            Mouse.Click(uIItemButton1, new Point(42, 62));
        }
        
        /// <summary>
        /// VerifyResult_Minus - Используйте "VerifyResult_MinusExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void VerifyResult_Minus()
        {
            #region Variable Declarations
            WinEdit uITB_ResultEdit = this.UICalculator20Window.UIItem0Window.UITB_ResultEdit;
            #endregion

            // Убедитесь, что свойство Text "TB_Result" надпись равняется "66"
            Assert.AreEqual(this.VerifyResult_MinusExpectedValues.UITB_ResultEditText, uITB_ResultEdit.Text, "Wrong result!");
        }
        
        /// <summary>
        /// 12 * 12 = 144
        /// </summary>
        public void WF_Mul()
        {
            #region Variable Declarations
            WinButton uIItem1Button = this.UICalculator20Window.UIItem1Window.UIItem1Button;
            WinButton uIItem2Button = this.UICalculator20Window.UIItem2Window.UIItem2Button;
            WinButton uIItemButton = this.UICalculator20Window.UIItemWindow3.UIItemButton;
            WinButton uIItemButton1 = this.UICalculator20Window.UIItemWindow1.UIItemButton;
            #endregion

            // Щелкните "1" кнопка
            Mouse.Click(uIItem1Button, new Point(58, 67));

            // Щелкните "2" кнопка
            Mouse.Click(uIItem2Button, new Point(39, 49));

            // Щелкните "*" кнопка
            Mouse.Click(uIItemButton, new Point(54, 71));

            // Щелкните "1" кнопка
            Mouse.Click(uIItem1Button, new Point(53, 43));

            // Щелкните "2" кнопка
            Mouse.Click(uIItem2Button, new Point(60, 52));

            // Щелкните "=" кнопка
            Mouse.Click(uIItemButton1, new Point(35, 41));
        }
        
        /// <summary>
        /// VerifyResult_Mul - Используйте "VerifyResult_MulExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void VerifyResult_Mul()
        {
            #region Variable Declarations
            WinEdit uITB_ResultEdit = this.UICalculator20Window.UIItem0Window.UITB_ResultEdit;
            #endregion

            // Убедитесь, что свойство Text "TB_Result" надпись равняется "144"
            Assert.AreEqual(this.VerifyResult_MulExpectedValues.UITB_ResultEditText, uITB_ResultEdit.Text, "Wrong result!");
        }
        
        /// <summary>
        /// 256 / 64 = 4
        /// </summary>
        public void WF_Div()
        {
            #region Variable Declarations
            WinButton uIItem2Button = this.UICalculator20Window.UIItem2Window.UIItem2Button;
            WinButton uIItem5Button = this.UICalculator20Window.UIItem5Window.UIItem5Button;
            WinButton uIItem6Button = this.UICalculator20Window.UIItem6Window.UIItem6Button;
            WinButton uIItemButton = this.UICalculator20Window.UIItemWindow4.UIItemButton;
            WinButton uIItem4Button = this.UICalculator20Window.UIItem4Window.UIItem4Button;
            WinButton uIItemButton1 = this.UICalculator20Window.UIItemWindow1.UIItemButton;
            #endregion

            // Щелкните "2" кнопка
            Mouse.Click(uIItem2Button, new Point(70, 49));

            // Щелкните "5" кнопка
            Mouse.Click(uIItem5Button, new Point(52, 49));

            // Щелкните "6" кнопка
            Mouse.Click(uIItem6Button, new Point(30, 33));

            // Щелкните "/" кнопка
            Mouse.Click(uIItemButton, new Point(50, 57));

            // Щелкните "6" кнопка
            Mouse.Click(uIItem6Button, new Point(33, 48));

            // Щелкните "4" кнопка
            Mouse.Click(uIItem4Button, new Point(49, 51));

            // Щелкните "=" кнопка
            Mouse.Click(uIItemButton1, new Point(58, 28));
        }
        
        /// <summary>
        /// VerifyResult_Div - Используйте "VerifyResult_DivExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void VerifyResult_Div()
        {
            #region Variable Declarations
            WinEdit uITB_ResultEdit = this.UICalculator20Window.UIItem0Window.UITB_ResultEdit;
            #endregion

            // Убедитесь, что свойство Text "TB_Result" надпись равняется "4"
            Assert.AreEqual(this.VerifyResult_DivExpectedValues.UITB_ResultEditText, uITB_ResultEdit.Text, "Wrong result!");
        }
        
        /// <summary>
        /// 256 / 0
        /// </summary>
        public void WF_DivByNull()
        {
            #region Variable Declarations
            WinButton uIItem2Button = this.UICalculator20Window.UIItem2Window.UIItem2Button;
            WinButton uIItem5Button = this.UICalculator20Window.UIItem5Window.UIItem5Button;
            WinButton uIItem6Button = this.UICalculator20Window.UIItem6Window.UIItem6Button;
            WinButton uIItemButton = this.UICalculator20Window.UIItemWindow4.UIItemButton;
            WinButton uIItem0Button = this.UICalculator20Window.UIItem0Window1.UIItem0Button;
            WinButton uIItemButton1 = this.UICalculator20Window.UIItemWindow1.UIItemButton;
            WinButton uIПродолжитьButton = this.UICalculator20Window1.UICalculator20Client.UIПродолжитьButton;
            #endregion

            // Щелкните "2" кнопка
            Mouse.Click(uIItem2Button, new Point(57, 42));

            // Щелкните "5" кнопка
            Mouse.Click(uIItem5Button, new Point(49, 23));

            // Щелкните "6" кнопка
            Mouse.Click(uIItem6Button, new Point(33, 35));

            // Щелкните "/" кнопка
            Mouse.Click(uIItemButton, new Point(54, 68));

            // Щелкните "0" кнопка
            Mouse.Click(uIItem0Button, new Point(238, 61));

            // Щелкните "=" кнопка
            Mouse.Click(uIItemButton1, new Point(53, 45));

            // Щелкните "Продол&жить" кнопка
            Mouse.Click(uIПродолжитьButton, new Point(47, 10));
        }
        
        /// <summary>
        /// WF_ArgExc
        /// </summary>
        public void WF_ArgExc()
        {
            #region Variable Declarations
            WinButton uIItemButton = this.UICalculator20Window.UIItemWindow1.UIItemButton;
            WinButton uIПродолжитьButton = this.UICalculator20Window1.UICalculator20Client.UIПродолжитьButton;
            #endregion

            // Щелкните "=" кнопка
            Mouse.Click(uIItemButton, new Point(23, 57));

            // Щелкните "Продол&жить" кнопка
            Mouse.Click(uIПродолжитьButton, new Point(30, 7));
        }
        
        /// <summary>
        /// WF_ButtonTest
        /// </summary>
        public void WF_ButtonTest()
        {
            #region Variable Declarations
            WinButton uIItem1Button = this.UICalculator20Window.UIItem1Window.UIItem1Button;
            WinButton uIItem2Button = this.UICalculator20Window.UIItem2Window.UIItem2Button;
            WinButton uIItem3Button = this.UICalculator20Window.UIItem3Window.UIItem3Button;
            WinButton uIItem4Button = this.UICalculator20Window.UIItem4Window.UIItem4Button;
            WinButton uIItem5Button = this.UICalculator20Window.UIItem5Window.UIItem5Button;
            WinButton uIItem6Button = this.UICalculator20Window.UIItem6Window.UIItem6Button;
            WinButton uIItem7Button = this.UICalculator20Window.UIItem7Window.UIItem7Button;
            WinButton uIItem8Button = this.UICalculator20Window.UIItem8Window.UIItem8Button;
            WinButton uIItem9Button = this.UICalculator20Window.UIItem9Window.UIItem9Button;
            WinButton uIItem0Button = this.UICalculator20Window.UIItem0Window1.UIItem0Button;
            WinButton uIItemButton = this.UICalculator20Window.UIItemWindow.UIItemButton;
            WinButton uIItemButton1 = this.UICalculator20Window.UIItemWindow3.UIItemButton;
            WinButton uIItemButton2 = this.UICalculator20Window.UIItemWindow4.UIItemButton;
            WinButton uIItemButton3 = this.UICalculator20Window.UIItemWindow2.UIItemButton;
            WinButton uIItemButton4 = this.UICalculator20Window.UIItemWindow1.UIItemButton;
            #endregion

            // Щелкните "1" кнопка
            Mouse.Click(uIItem1Button, new Point(53, 52));

            // Щелкните "2" кнопка
            Mouse.Click(uIItem2Button, new Point(50, 64));

            // Щелкните "3" кнопка
            Mouse.Click(uIItem3Button, new Point(43, 67));

            // Щелкните "4" кнопка
            Mouse.Click(uIItem4Button, new Point(75, 25));

            // Щелкните "5" кнопка
            Mouse.Click(uIItem5Button, new Point(73, 49));

            // Щелкните "6" кнопка
            Mouse.Click(uIItem6Button, new Point(68, 54));

            // Щелкните "7" кнопка
            Mouse.Click(uIItem7Button, new Point(53, 66));

            // Щелкните "8" кнопка
            Mouse.Click(uIItem8Button, new Point(30, 63));

            // Щелкните "9" кнопка
            Mouse.Click(uIItem9Button, new Point(29, 57));

            // Щелкните "0" кнопка
            Mouse.Click(uIItem0Button, new Point(140, 43));

            // Щелкните "+" кнопка
            Mouse.Click(uIItemButton, new Point(51, 54));

            // Щелкните "*" кнопка
            Mouse.Click(uIItemButton1, new Point(50, 54));

            // Щелкните "/" кнопка
            Mouse.Click(uIItemButton2, new Point(47, 45));

            // Щелкните "-" кнопка
            Mouse.Click(uIItemButton3, new Point(49, 45));

            // Щелкните "1" кнопка
            Mouse.Click(uIItem1Button, new Point(50, 62));

            // Щелкните "2" кнопка
            Mouse.Click(uIItem2Button, new Point(34, 67));

            // Щелкните "3" кнопка
            Mouse.Click(uIItem3Button, new Point(51, 57));

            // Щелкните "4" кнопка
            Mouse.Click(uIItem4Button, new Point(53, 69));

            // Щелкните "5" кнопка
            Mouse.Click(uIItem5Button, new Point(77, 69));

            // Щелкните "6" кнопка
            Mouse.Click(uIItem6Button, new Point(77, 61));

            // Щелкните "7" кнопка
            Mouse.Click(uIItem7Button, new Point(83, 54));

            // Щелкните "8" кнопка
            Mouse.Click(uIItem8Button, new Point(53, 59));

            // Щелкните "9" кнопка
            Mouse.Click(uIItem9Button, new Point(48, 44));

            // Щелкните "0" кнопка
            Mouse.Click(uIItem0Button, new Point(171, 41));

            // Щелкните "=" кнопка
            Mouse.Click(uIItemButton4, new Point(48, 58));
        }
        
        /// <summary>
        /// VerifyResult_ButtonTest - Используйте "VerifyResult_ButtonTestExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void VerifyResult_ButtonTest()
        {
            #region Variable Declarations
            WinEdit uITB_ResultEdit = this.UICalculator20Window.UIItem0Window.UITB_ResultEdit;
            #endregion

            // Убедитесь, что свойство Text "TB_Result" надпись равняется "0"
            Assert.AreEqual(this.VerifyResult_ButtonTestExpectedValues.UITB_ResultEditText, uITB_ResultEdit.Text, "Wrong result!");
        }
        
        #region Properties
        public virtual VerifyResult_PlusExpectedValues VerifyResult_PlusExpectedValues
        {
            get
            {
                if ((this.mVerifyResult_PlusExpectedValues == null))
                {
                    this.mVerifyResult_PlusExpectedValues = new VerifyResult_PlusExpectedValues();
                }
                return this.mVerifyResult_PlusExpectedValues;
            }
        }
        
        public virtual VerifyResult_MinusExpectedValues VerifyResult_MinusExpectedValues
        {
            get
            {
                if ((this.mVerifyResult_MinusExpectedValues == null))
                {
                    this.mVerifyResult_MinusExpectedValues = new VerifyResult_MinusExpectedValues();
                }
                return this.mVerifyResult_MinusExpectedValues;
            }
        }
        
        public virtual VerifyResult_MulExpectedValues VerifyResult_MulExpectedValues
        {
            get
            {
                if ((this.mVerifyResult_MulExpectedValues == null))
                {
                    this.mVerifyResult_MulExpectedValues = new VerifyResult_MulExpectedValues();
                }
                return this.mVerifyResult_MulExpectedValues;
            }
        }
        
        public virtual VerifyResult_DivExpectedValues VerifyResult_DivExpectedValues
        {
            get
            {
                if ((this.mVerifyResult_DivExpectedValues == null))
                {
                    this.mVerifyResult_DivExpectedValues = new VerifyResult_DivExpectedValues();
                }
                return this.mVerifyResult_DivExpectedValues;
            }
        }
        
        public virtual VerifyResult_ButtonTestExpectedValues VerifyResult_ButtonTestExpectedValues
        {
            get
            {
                if ((this.mVerifyResult_ButtonTestExpectedValues == null))
                {
                    this.mVerifyResult_ButtonTestExpectedValues = new VerifyResult_ButtonTestExpectedValues();
                }
                return this.mVerifyResult_ButtonTestExpectedValues;
            }
        }
        
        public UICalculator20Window UICalculator20Window
        {
            get
            {
                if ((this.mUICalculator20Window == null))
                {
                    this.mUICalculator20Window = new UICalculator20Window();
                }
                return this.mUICalculator20Window;
            }
        }
        
        public UICalculator20Window1 UICalculator20Window1
        {
            get
            {
                if ((this.mUICalculator20Window1 == null))
                {
                    this.mUICalculator20Window1 = new UICalculator20Window1();
                }
                return this.mUICalculator20Window1;
            }
        }
        #endregion
        
        #region Fields
        private VerifyResult_PlusExpectedValues mVerifyResult_PlusExpectedValues;
        
        private VerifyResult_MinusExpectedValues mVerifyResult_MinusExpectedValues;
        
        private VerifyResult_MulExpectedValues mVerifyResult_MulExpectedValues;
        
        private VerifyResult_DivExpectedValues mVerifyResult_DivExpectedValues;
        
        private VerifyResult_ButtonTestExpectedValues mVerifyResult_ButtonTestExpectedValues;
        
        private UICalculator20Window mUICalculator20Window;
        
        private UICalculator20Window1 mUICalculator20Window1;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "VerifyResult_Plus"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class VerifyResult_PlusExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TB_Result" надпись равняется "246"
        /// </summary>
        public string UITB_ResultEditText = "246";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "VerifyResult_Minus"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class VerifyResult_MinusExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TB_Result" надпись равняется "66"
        /// </summary>
        public string UITB_ResultEditText = "66";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "VerifyResult_Mul"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class VerifyResult_MulExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TB_Result" надпись равняется "144"
        /// </summary>
        public string UITB_ResultEditText = "144";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "VerifyResult_Div"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class VerifyResult_DivExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TB_Result" надпись равняется "4"
        /// </summary>
        public string UITB_ResultEditText = "4";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "VerifyResult_ButtonTest"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class VerifyResult_ButtonTestExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TB_Result" надпись равняется "0"
        /// </summary>
        public string UITB_ResultEditText = "0";
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UICalculator20Window : WinWindow
    {
        
        public UICalculator20Window()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Calculator2.0";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public UIItem1Window UIItem1Window
        {
            get
            {
                if ((this.mUIItem1Window == null))
                {
                    this.mUIItem1Window = new UIItem1Window(this);
                }
                return this.mUIItem1Window;
            }
        }
        
        public UIItem2Window UIItem2Window
        {
            get
            {
                if ((this.mUIItem2Window == null))
                {
                    this.mUIItem2Window = new UIItem2Window(this);
                }
                return this.mUIItem2Window;
            }
        }
        
        public UIItem3Window UIItem3Window
        {
            get
            {
                if ((this.mUIItem3Window == null))
                {
                    this.mUIItem3Window = new UIItem3Window(this);
                }
                return this.mUIItem3Window;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItem0Window UIItem0Window
        {
            get
            {
                if ((this.mUIItem0Window == null))
                {
                    this.mUIItem0Window = new UIItem0Window(this);
                }
                return this.mUIItem0Window;
            }
        }
        
        public UIItem8Window UIItem8Window
        {
            get
            {
                if ((this.mUIItem8Window == null))
                {
                    this.mUIItem8Window = new UIItem8Window(this);
                }
                return this.mUIItem8Window;
            }
        }
        
        public UIItem9Window UIItem9Window
        {
            get
            {
                if ((this.mUIItem9Window == null))
                {
                    this.mUIItem9Window = new UIItem9Window(this);
                }
                return this.mUIItem9Window;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItem5Window UIItem5Window
        {
            get
            {
                if ((this.mUIItem5Window == null))
                {
                    this.mUIItem5Window = new UIItem5Window(this);
                }
                return this.mUIItem5Window;
            }
        }
        
        public UIItem6Window UIItem6Window
        {
            get
            {
                if ((this.mUIItem6Window == null))
                {
                    this.mUIItem6Window = new UIItem6Window(this);
                }
                return this.mUIItem6Window;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItem4Window UIItem4Window
        {
            get
            {
                if ((this.mUIItem4Window == null))
                {
                    this.mUIItem4Window = new UIItem4Window(this);
                }
                return this.mUIItem4Window;
            }
        }
        
        public UIItem0Window1 UIItem0Window1
        {
            get
            {
                if ((this.mUIItem0Window1 == null))
                {
                    this.mUIItem0Window1 = new UIItem0Window1(this);
                }
                return this.mUIItem0Window1;
            }
        }
        
        public UIItem7Window UIItem7Window
        {
            get
            {
                if ((this.mUIItem7Window == null))
                {
                    this.mUIItem7Window = new UIItem7Window(this);
                }
                return this.mUIItem7Window;
            }
        }
        #endregion
        
        #region Fields
        private UIItem1Window mUIItem1Window;
        
        private UIItem2Window mUIItem2Window;
        
        private UIItem3Window mUIItem3Window;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItem0Window mUIItem0Window;
        
        private UIItem8Window mUIItem8Window;
        
        private UIItem9Window mUIItem9Window;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItem5Window mUIItem5Window;
        
        private UIItem6Window mUIItem6Window;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIItem4Window mUIItem4Window;
        
        private UIItem0Window1 mUIItem0Window1;
        
        private UIItem7Window mUIItem7Window;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItem1Window : WinWindow
    {
        
        public UIItem1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem1Button
        {
            get
            {
                if ((this.mUIItem1Button == null))
                {
                    this.mUIItem1Button = new WinButton(this);
                    #region Условия поиска
                    this.mUIItem1Button.SearchProperties[WinButton.PropertyNames.Name] = "1";
                    this.mUIItem1Button.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItem1Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem1Button;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItem2Window : WinWindow
    {
        
        public UIItem2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button2";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem2Button
        {
            get
            {
                if ((this.mUIItem2Button == null))
                {
                    this.mUIItem2Button = new WinButton(this);
                    #region Условия поиска
                    this.mUIItem2Button.SearchProperties[WinButton.PropertyNames.Name] = "2";
                    this.mUIItem2Button.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItem2Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem2Button;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItem3Window : WinWindow
    {
        
        public UIItem3Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button3";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem3Button
        {
            get
            {
                if ((this.mUIItem3Button == null))
                {
                    this.mUIItem3Button = new WinButton(this);
                    #region Условия поиска
                    this.mUIItem3Button.SearchProperties[WinButton.PropertyNames.Name] = "3";
                    this.mUIItem3Button.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItem3Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem3Button;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonPlus";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "+";
                    this.mUIItemButton.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonEquation";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "=";
                    this.mUIItemButton.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItem0Window : WinWindow
    {
        
        public UIItem0Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TB_Result";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinEdit UITB_ResultEdit
        {
            get
            {
                if ((this.mUITB_ResultEdit == null))
                {
                    this.mUITB_ResultEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITB_ResultEdit.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUITB_ResultEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITB_ResultEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItem8Window : WinWindow
    {
        
        public UIItem8Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button8";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem8Button
        {
            get
            {
                if ((this.mUIItem8Button == null))
                {
                    this.mUIItem8Button = new WinButton(this);
                    #region Условия поиска
                    this.mUIItem8Button.SearchProperties[WinButton.PropertyNames.Name] = "8";
                    this.mUIItem8Button.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItem8Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem8Button;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItem9Window : WinWindow
    {
        
        public UIItem9Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button9";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem9Button
        {
            get
            {
                if ((this.mUIItem9Button == null))
                {
                    this.mUIItem9Button = new WinButton(this);
                    #region Условия поиска
                    this.mUIItem9Button.SearchProperties[WinButton.PropertyNames.Name] = "9";
                    this.mUIItem9Button.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItem9Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem9Button;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonMinus";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "-";
                    this.mUIItemButton.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonMul";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "*";
                    this.mUIItemButton.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItem5Window : WinWindow
    {
        
        public UIItem5Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button5";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem5Button
        {
            get
            {
                if ((this.mUIItem5Button == null))
                {
                    this.mUIItem5Button = new WinButton(this);
                    #region Условия поиска
                    this.mUIItem5Button.SearchProperties[WinButton.PropertyNames.Name] = "5";
                    this.mUIItem5Button.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItem5Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem5Button;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItem6Window : WinWindow
    {
        
        public UIItem6Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button6";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem6Button
        {
            get
            {
                if ((this.mUIItem6Button == null))
                {
                    this.mUIItem6Button = new WinButton(this);
                    #region Условия поиска
                    this.mUIItem6Button.SearchProperties[WinButton.PropertyNames.Name] = "6";
                    this.mUIItem6Button.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItem6Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem6Button;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonDiv";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "/";
                    this.mUIItemButton.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItem4Window : WinWindow
    {
        
        public UIItem4Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button4";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem4Button
        {
            get
            {
                if ((this.mUIItem4Button == null))
                {
                    this.mUIItem4Button = new WinButton(this);
                    #region Условия поиска
                    this.mUIItem4Button.SearchProperties[WinButton.PropertyNames.Name] = "4";
                    this.mUIItem4Button.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItem4Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem4Button;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItem0Window1 : WinWindow
    {
        
        public UIItem0Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button0";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem0Button
        {
            get
            {
                if ((this.mUIItem0Button == null))
                {
                    this.mUIItem0Button = new WinButton(this);
                    #region Условия поиска
                    this.mUIItem0Button.SearchProperties[WinButton.PropertyNames.Name] = "0";
                    this.mUIItem0Button.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItem0Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem0Button;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItem7Window : WinWindow
    {
        
        public UIItem7Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button7";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem7Button
        {
            get
            {
                if ((this.mUIItem7Button == null))
                {
                    this.mUIItem7Button = new WinButton(this);
                    #region Условия поиска
                    this.mUIItem7Button.SearchProperties[WinButton.PropertyNames.Name] = "7";
                    this.mUIItem7Button.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIItem7Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem7Button;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UICalculator20Window1 : WinWindow
    {
        
        public UICalculator20Window1()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Calculator2.0";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public UICalculator20Client UICalculator20Client
        {
            get
            {
                if ((this.mUICalculator20Client == null))
                {
                    this.mUICalculator20Client = new UICalculator20Client(this);
                }
                return this.mUICalculator20Client;
            }
        }
        #endregion
        
        #region Fields
        private UICalculator20Client mUICalculator20Client;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UICalculator20Client : WinClient
    {
        
        public UICalculator20Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinControl.PropertyNames.Name] = "Calculator2.0";
            this.WindowTitles.Add("Calculator2.0");
            #endregion
        }
        
        #region Properties
        public WinButton UIПродолжитьButton
        {
            get
            {
                if ((this.mUIПродолжитьButton == null))
                {
                    this.mUIПродолжитьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIПродолжитьButton.SearchProperties[WinButton.PropertyNames.Name] = "Продолжить";
                    this.mUIПродолжитьButton.WindowTitles.Add("Calculator2.0");
                    #endregion
                }
                return this.mUIПродолжитьButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIПродолжитьButton;
        #endregion
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public partial class UIMap
    {

        /// <summary>
        /// 256.256 / 64 = 4.004
        /// </summary>
        public void UIT_Div_Float()
        {
            #region Variable Declarations
            WinEdit uITB_FirstOperandEdit = this.UICalculatorWindow.UITB_FirstOperandWindow.UITB_FirstOperandEdit;
            WinEdit uITB_OperationEdit = this.UICalculatorWindow.UITB_OperationWindow.UITB_OperationEdit;
            WinEdit uITB_SecondOperandEdit = this.UICalculatorWindow.UITB_SecondOperandWindow.UITB_SecondOperandEdit;
            WinButton uICalculateButton = this.UICalculatorWindow.UICalculateWindow.UICalculateButton;
            #endregion

            // Тип "256,256" в "TB_FirstOperand" надпись
            uITB_FirstOperandEdit.Text = this.UIT_Div_FloatParams.UITB_FirstOperandEditText;

            // Тип "/" в "TB_Operation" надпись
            uITB_OperationEdit.Text = this.UIT_Div_FloatParams.UITB_OperationEditText;

            // Тип "64" в "TB_SecondOperand" надпись
            uITB_SecondOperandEdit.Text = this.UIT_Div_FloatParams.UITB_SecondOperandEditText;

            // Установите флаг, чтобы разрешить продолжить воспроизведение в случае невыполнения необязательных действий. (Например, при сбое действия наведения указателя.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Щелкните "Calculate" кнопка
            Mouse.Click(uICalculateButton, new Point(134, 25));

            // Перезагрузите флаг, чтобы убедиться, что в случае ошибки воспроизведение останавливается.
            Playback.PlaybackSettings.ContinueOnError = false;
        }

        /// <summary>
        /// 256 / 64 = 4
        /// </summary>
        public void UIT_Div_Int()
        {
            #region Variable Declarations
            WinEdit uITB_FirstOperandEdit = this.UICalculatorWindow.UITB_FirstOperandWindow.UITB_FirstOperandEdit;
            WinEdit uITB_OperationEdit = this.UICalculatorWindow.UITB_OperationWindow.UITB_OperationEdit;
            WinEdit uITB_SecondOperandEdit = this.UICalculatorWindow.UITB_SecondOperandWindow.UITB_SecondOperandEdit;
            WinButton uICalculateButton = this.UICalculatorWindow.UICalculateWindow.UICalculateButton;
            #endregion

            // Тип "256" в "TB_FirstOperand" надпись
            uITB_FirstOperandEdit.Text = this.UIT_Div_IntParams.UITB_FirstOperandEditText;

            // Тип "/" в "TB_Operation" надпись
            uITB_OperationEdit.Text = this.UIT_Div_IntParams.UITB_OperationEditText;

            // Тип "64" в "TB_SecondOperand" надпись
            uITB_SecondOperandEdit.Text = this.UIT_Div_IntParams.UITB_SecondOperandEditText;

            // Щелкните "Calculate" кнопка
            Mouse.Click(uICalculateButton, new Point(140, 23));
        }

        /// <summary>
        /// UIT_EmptyField_Exc
        /// </summary>
        public void UIT_EmptyField_Exc()
        {
            #region Variable Declarations
            WinButton uICalculateButton = this.UICalculatorWindow.UICalculateWindow.UICalculateButton;
            WinButton uIПродолжитьButton = this.UICalculatorWindow1.UICalculatorClient.UIПродолжитьButton;
            #endregion

            // Щелкните "Calculate" кнопка
            Mouse.Click(uICalculateButton, new Point(173, 19));

            // Щелкните "Продол&жить" кнопка
            Mouse.Click(uIПродолжитьButton, new Point(62, 12));
        }

        /// <summary>
        /// UIT_LettersInField_Exc - Используйте "UIT_LettersInField_ExcParams" для передачи параметров в этот метод.
        /// </summary>
        public void UIT_LettersInField_Exc()
        {
            #region Variable Declarations
            WinEdit uITB_FirstOperandEdit = this.UICalculatorWindow.UITB_FirstOperandWindow.UITB_FirstOperandEdit;
            WinEdit uITB_OperationEdit = this.UICalculatorWindow.UITB_OperationWindow.UITB_OperationEdit;
            WinEdit uITB_SecondOperandEdit = this.UICalculatorWindow.UITB_SecondOperandWindow.UITB_SecondOperandEdit;
            WinButton uICalculateButton = this.UICalculatorWindow.UICalculateWindow.UICalculateButton;
            WinButton uIПродолжитьButton = this.UICalculatorWindow1.UICalculatorClient.UIПродолжитьButton;
            #endregion

            // Тип "asd" в "TB_FirstOperand" надпись
            uITB_FirstOperandEdit.Text = this.UIT_LettersInField_ExcParams.UITB_FirstOperandEditText;

            // Тип "+" в "TB_Operation" надпись
            uITB_OperationEdit.Text = this.UIT_LettersInField_ExcParams.UITB_OperationEditText;

            // Тип "123" в "TB_SecondOperand" надпись
            uITB_SecondOperandEdit.Text = this.UIT_LettersInField_ExcParams.UITB_SecondOperandEditText;

            // Щелкните "Calculate" кнопка
            Mouse.Click(uICalculateButton, new Point(137, 20));

            // Щелкните "Продол&жить" кнопка
            Mouse.Click(uIПродолжитьButton, new Point(61, 14));
        }

        /// <summary>
        /// 8.9 - 0.23 = 8.67
        /// </summary>
        public void UIT_Minus_Float()
        {
            #region Variable Declarations
            WinEdit uITB_FirstOperandEdit = this.UICalculatorWindow.UITB_FirstOperandWindow.UITB_FirstOperandEdit;
            WinEdit uITB_OperationEdit = this.UICalculatorWindow.UITB_OperationWindow.UITB_OperationEdit;
            WinEdit uITB_SecondOperandEdit = this.UICalculatorWindow.UITB_SecondOperandWindow.UITB_SecondOperandEdit;
            WinButton uICalculateButton = this.UICalculatorWindow.UICalculateWindow.UICalculateButton;
            #endregion

            // Тип "8,9" в "TB_FirstOperand" надпись
            uITB_FirstOperandEdit.Text = this.UIT_Minus_FloatParams.UITB_FirstOperandEditText;

            // Тип "-" в "TB_Operation" надпись
            uITB_OperationEdit.Text = this.UIT_Minus_FloatParams.UITB_OperationEditText;

            // Тип "0,23" в "TB_SecondOperand" надпись
            uITB_SecondOperandEdit.Text = this.UIT_Minus_FloatParams.UITB_SecondOperandEditText;

            // Щелкните "Calculate" кнопка
            Mouse.Click(uICalculateButton, new Point(153, 17));
        }

        /// <summary>
        /// 86 - 23 = 63
        /// </summary>
        public void UIT_Minus_Int()
        {
            #region Variable Declarations
            WinEdit uITB_FirstOperandEdit = this.UICalculatorWindow.UITB_FirstOperandWindow.UITB_FirstOperandEdit;
            WinEdit uITB_OperationEdit = this.UICalculatorWindow.UITB_OperationWindow.UITB_OperationEdit;
            WinEdit uITB_SecondOperandEdit = this.UICalculatorWindow.UITB_SecondOperandWindow.UITB_SecondOperandEdit;
            WinButton uICalculateButton = this.UICalculatorWindow.UICalculateWindow.UICalculateButton;
            #endregion

            // Тип "86" в "TB_FirstOperand" надпись
            uITB_FirstOperandEdit.Text = this.UIT_Minus_IntParams.UITB_FirstOperandEditText;

            // Тип "-" в "TB_Operation" надпись
            uITB_OperationEdit.Text = this.UIT_Minus_IntParams.UITB_OperationEditText;

            // Тип "23" в "TB_SecondOperand" надпись
            uITB_SecondOperandEdit.Text = this.UIT_Minus_IntParams.UITB_SecondOperandEditText;

            // Щелкните "Calculate" кнопка
            Mouse.Click(uICalculateButton, new Point(198, 14));
        }

        /// <summary>
        /// 1.7 * 0.3 = 0.51
        /// </summary>
        public void UIT_Mul_Float()
        {
            #region Variable Declarations
            WinEdit uITB_FirstOperandEdit = this.UICalculatorWindow.UITB_FirstOperandWindow.UITB_FirstOperandEdit;
            WinEdit uITB_OperationEdit = this.UICalculatorWindow.UITB_OperationWindow.UITB_OperationEdit;
            WinEdit uITB_SecondOperandEdit = this.UICalculatorWindow.UITB_SecondOperandWindow.UITB_SecondOperandEdit;
            WinButton uICalculateButton = this.UICalculatorWindow.UICalculateWindow.UICalculateButton;
            #endregion

            // Тип "1,7" в "TB_FirstOperand" надпись
            uITB_FirstOperandEdit.Text = this.UIT_Mul_FloatParams.UITB_FirstOperandEditText;

            // Тип "*" в "TB_Operation" надпись
            uITB_OperationEdit.Text = this.UIT_Mul_FloatParams.UITB_OperationEditText;

            // Тип "0,3" в "TB_SecondOperand" надпись
            uITB_SecondOperandEdit.Text = this.UIT_Mul_FloatParams.UITB_SecondOperandEditText;

            // Щелкните "Calculate" кнопка
            Mouse.Click(uICalculateButton, new Point(172, 25));
        }

        /// <summary>
        /// 17 * 3 = 51
        /// </summary>
        public void UIT_Mul_Int()
        {
            #region Variable Declarations
            WinEdit uITB_FirstOperandEdit = this.UICalculatorWindow.UITB_FirstOperandWindow.UITB_FirstOperandEdit;
            WinEdit uITB_OperationEdit = this.UICalculatorWindow.UITB_OperationWindow.UITB_OperationEdit;
            WinEdit uITB_SecondOperandEdit = this.UICalculatorWindow.UITB_SecondOperandWindow.UITB_SecondOperandEdit;
            WinButton uICalculateButton = this.UICalculatorWindow.UICalculateWindow.UICalculateButton;
            #endregion

            // Тип "17" в "TB_FirstOperand" надпись
            uITB_FirstOperandEdit.Text = this.UIT_Mul_IntParams.UITB_FirstOperandEditText;

            // Тип "*" в "TB_Operation" надпись
            uITB_OperationEdit.Text = this.UIT_Mul_IntParams.UITB_OperationEditText;

            // Тип "3" в "TB_SecondOperand" надпись
            uITB_SecondOperandEdit.Text = this.UIT_Mul_IntParams.UITB_SecondOperandEditText;

            // Щелкните "Calculate" кнопка
            Mouse.Click(uICalculateButton, new Point(148, 19));
        }

        /// <summary>
        /// 12.3 + 1.23 = 13.53
        /// </summary>
        public void UIT_Plus_Float()
        {
            #region Variable Declarations
            WinEdit uITB_FirstOperandEdit = this.UICalculatorWindow.UITB_FirstOperandWindow.UITB_FirstOperandEdit;
            WinEdit uITB_OperationEdit = this.UICalculatorWindow.UITB_OperationWindow.UITB_OperationEdit;
            WinEdit uITB_SecondOperandEdit = this.UICalculatorWindow.UITB_SecondOperandWindow.UITB_SecondOperandEdit;
            WinButton uICalculateButton = this.UICalculatorWindow.UICalculateWindow.UICalculateButton;
            #endregion

            // Тип "12,3" в "TB_FirstOperand" надпись
            uITB_FirstOperandEdit.Text = this.UIT_Plus_FloatParams.UITB_FirstOperandEditText;

            // Тип "+" в "TB_Operation" надпись
            uITB_OperationEdit.Text = this.UIT_Plus_FloatParams.UITB_OperationEditText;

            // Тип "1,23" в "TB_SecondOperand" надпись
            uITB_SecondOperandEdit.Text = this.UIT_Plus_FloatParams.UITB_SecondOperandEditText;

            // Щелкните "Calculate" кнопка
            Mouse.Click(uICalculateButton, new Point(156, 26));
        }

        /// <summary>
        /// 123 + 123 = 246
        /// </summary>
        public void UIT_Plus_Int()
        {
            #region Variable Declarations
            WinEdit uITB_FirstOperandEdit = this.UICalculatorWindow.UITB_FirstOperandWindow.UITB_FirstOperandEdit;
            WinEdit uITB_OperationEdit = this.UICalculatorWindow.UITB_OperationWindow.UITB_OperationEdit;
            WinEdit uITB_SecondOperandEdit = this.UICalculatorWindow.UITB_SecondOperandWindow.UITB_SecondOperandEdit;
            WinButton uICalculateButton = this.UICalculatorWindow.UICalculateWindow.UICalculateButton;
            #endregion

            // Тип "123" в "TB_FirstOperand" надпись
            uITB_FirstOperandEdit.Text = this.UIT_Plus_IntParams.UITB_FirstOperandEditText;

            // Тип "+" в "TB_Operation" надпись
            uITB_OperationEdit.Text = this.UIT_Plus_IntParams.UITB_OperationEditText;

            // Тип "123" в "TB_SecondOperand" надпись
            uITB_SecondOperandEdit.Text = this.UIT_Plus_IntParams.UITB_SecondOperandEditText;

            // Щелкните "Calculate" кнопка
            Mouse.Click(uICalculateButton, uICalculateButton.GetClickablePoint());
        }

        /// <summary>
        /// UIT_SignField_Exc - Используйте "UIT_SignField_ExcParams" для передачи параметров в этот метод.
        /// </summary>
        public void UIT_SignField_Exc()
        {
            #region Variable Declarations
            WinEdit uITB_FirstOperandEdit = this.UICalculatorWindow.UITB_FirstOperandWindow.UITB_FirstOperandEdit;
            WinEdit uITB_OperationEdit = this.UICalculatorWindow.UITB_OperationWindow.UITB_OperationEdit;
            WinEdit uITB_SecondOperandEdit = this.UICalculatorWindow.UITB_SecondOperandWindow.UITB_SecondOperandEdit;
            WinButton uICalculateButton = this.UICalculatorWindow.UICalculateWindow.UICalculateButton;
            WinButton uIПродолжитьButton = this.UICalculatorWindow1.UICalculatorClient.UIПродолжитьButton;
            #endregion

            // Тип "123" в "TB_FirstOperand" надпись
            uITB_FirstOperandEdit.Text = this.UIT_SignField_ExcParams.UITB_FirstOperandEditText;

            // Тип "%" в "TB_Operation" надпись
            uITB_OperationEdit.Text = this.UIT_SignField_ExcParams.UITB_OperationEditText;

            // Тип "123" в "TB_SecondOperand" надпись
            uITB_SecondOperandEdit.Text = this.UIT_SignField_ExcParams.UITB_SecondOperandEditText;

            // Щелкните "Calculate" кнопка
            Mouse.Click(uICalculateButton, new Point(138, 18));

            // Щелкните "Продол&жить" кнопка
            Mouse.Click(uIПродолжитьButton, new Point(48, 13));
        }

        /// <summary>
        /// VerifyResult_Div_Float - Используйте "VerifyResult_Div_FloatExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void VerifyResult_Div_Float()
        {
            #region Variable Declarations
            WinEdit uITB_ResultEdit = this.UICalculatorWindow.UITB_ResultWindow.UITB_ResultEdit;
            #endregion

            // Убедитесь, что свойство Text "TB_Result" надпись равняется "4,004"
            Assert.AreEqual(this.VerifyResult_Div_FloatExpectedValues.UITB_ResultEditText, uITB_ResultEdit.Text, "Wrong result!");
        }

        /// <summary>
        /// VerifyResult_Div_Int - Используйте "VerifyResult_Div_IntExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void VerifyResult_Div_Int()
        {
            #region Variable Declarations
            WinEdit uITB_ResultEdit = this.UICalculatorWindow.UITB_ResultWindow.UITB_ResultEdit;
            #endregion

            // Убедитесь, что свойство Text "TB_Result" надпись равняется "4"
            Assert.AreEqual(this.VerifyResult_Div_IntExpectedValues.UITB_ResultEditText, uITB_ResultEdit.Text, "Wrong result!");
        }

        /// <summary>
        /// VerifyResult_Minus_Float - Используйте "VerifyResult_Minus_FloatExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void VerifyResult_Minus_Float()
        {
            #region Variable Declarations
            WinEdit uITB_ResultEdit = this.UICalculatorWindow.UITB_ResultWindow.UITB_ResultEdit;
            #endregion

            // Убедитесь, что свойство Text "TB_Result" надпись равняется "8,67"
            Assert.AreEqual(this.VerifyResult_Minus_FloatExpectedValues.UITB_ResultEditText, uITB_ResultEdit.Text, "Wrong result!");
        }

        /// <summary>
        /// VerifyResult_Minus_Int - Используйте "VerifyResult_Minus_IntExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void VerifyResult_Minus_Int()
        {
            #region Variable Declarations
            WinEdit uITB_ResultEdit = this.UICalculatorWindow.UITB_ResultWindow.UITB_ResultEdit;
            #endregion

            // Убедитесь, что свойство Text "TB_Result" надпись равняется "63"
            Assert.AreEqual(this.VerifyResult_Minus_IntExpectedValues.UITB_ResultEditText, uITB_ResultEdit.Text, "Wrong result!");
        }

        /// <summary>
        /// VerifyResult_Mul_Float - Используйте "VerifyResult_Mul_FloatExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void VerifyResult_Mul_Float()
        {
            #region Variable Declarations
            WinEdit uITB_ResultEdit = this.UICalculatorWindow.UITB_ResultWindow.UITB_ResultEdit;
            #endregion

            // Убедитесь, что свойство Text "TB_Result" надпись равняется "0,51"
            Assert.AreEqual(this.VerifyResult_Mul_FloatExpectedValues.UITB_ResultEditText, uITB_ResultEdit.Text, "Wrong result!");
        }

        /// <summary>
        /// VerifyResult_Mul_Int - Используйте "VerifyResult_Mul_IntExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void VerifyResult_Mul_Int()
        {
            #region Variable Declarations
            WinEdit uITB_ResultEdit = this.UICalculatorWindow.UITB_ResultWindow.UITB_ResultEdit;
            #endregion

            // Убедитесь, что свойство Text "TB_Result" надпись равняется "51"
            Assert.AreEqual(this.VerifyResult_Mul_IntExpectedValues.UITB_ResultEditText, uITB_ResultEdit.Text, "Wrong result!");
        }

        /// <summary>
        /// VerifyResult_Plus_Float - Используйте "VerifyResult_Plus_FloatExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void VerifyResult_Plus_Float()
        {
            #region Variable Declarations
            WinEdit uITB_ResultEdit = this.UICalculatorWindow.UITB_ResultWindow.UITB_ResultEdit;
            #endregion

            // Убедитесь, что свойство Text "TB_Result" надпись равняется "13,53"
            Assert.AreEqual(this.VerifyResult_Plus_FloatExpectedValues.UITB_ResultEditText, uITB_ResultEdit.Text, "Wrong result!");
        }

        /// <summary>
        /// VerifyResult_Plus_Int - Используйте "VerifyResult_Plus_IntExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void VerifyResult_Plus_Int()
        {
            #region Variable Declarations
            WinEdit uITB_ResultEdit = this.UICalculatorWindow.UITB_ResultWindow.UITB_ResultEdit;
            #endregion

            // Убедитесь, что свойство Text "TB_Result" надпись равняется "246"
            Assert.AreEqual(this.VerifyResult_Plus_IntExpectedValues.UITB_ResultEditText, uITB_ResultEdit.Text, "Wrong result!");
        }

        #region Properties
        public virtual UIT_Div_FloatParams UIT_Div_FloatParams
        {
            get
            {
                if ((this.mUIT_Div_FloatParams == null))
                {
                    this.mUIT_Div_FloatParams = new UIT_Div_FloatParams();
                }
                return this.mUIT_Div_FloatParams;
            }
        }

        public virtual UIT_Div_IntParams UIT_Div_IntParams
        {
            get
            {
                if ((this.mUIT_Div_IntParams == null))
                {
                    this.mUIT_Div_IntParams = new UIT_Div_IntParams();
                }
                return this.mUIT_Div_IntParams;
            }
        }

        public virtual UIT_LettersInField_ExcParams UIT_LettersInField_ExcParams
        {
            get
            {
                if ((this.mUIT_LettersInField_ExcParams == null))
                {
                    this.mUIT_LettersInField_ExcParams = new UIT_LettersInField_ExcParams();
                }
                return this.mUIT_LettersInField_ExcParams;
            }
        }

        public virtual UIT_Minus_FloatParams UIT_Minus_FloatParams
        {
            get
            {
                if ((this.mUIT_Minus_FloatParams == null))
                {
                    this.mUIT_Minus_FloatParams = new UIT_Minus_FloatParams();
                }
                return this.mUIT_Minus_FloatParams;
            }
        }

        public virtual UIT_Minus_IntParams UIT_Minus_IntParams
        {
            get
            {
                if ((this.mUIT_Minus_IntParams == null))
                {
                    this.mUIT_Minus_IntParams = new UIT_Minus_IntParams();
                }
                return this.mUIT_Minus_IntParams;
            }
        }

        public virtual UIT_Mul_FloatParams UIT_Mul_FloatParams
        {
            get
            {
                if ((this.mUIT_Mul_FloatParams == null))
                {
                    this.mUIT_Mul_FloatParams = new UIT_Mul_FloatParams();
                }
                return this.mUIT_Mul_FloatParams;
            }
        }

        public virtual UIT_Mul_IntParams UIT_Mul_IntParams
        {
            get
            {
                if ((this.mUIT_Mul_IntParams == null))
                {
                    this.mUIT_Mul_IntParams = new UIT_Mul_IntParams();
                }
                return this.mUIT_Mul_IntParams;
            }
        }

        public virtual UIT_Plus_FloatParams UIT_Plus_FloatParams
        {
            get
            {
                if ((this.mUIT_Plus_FloatParams == null))
                {
                    this.mUIT_Plus_FloatParams = new UIT_Plus_FloatParams();
                }
                return this.mUIT_Plus_FloatParams;
            }
        }

        public virtual UIT_Plus_IntParams UIT_Plus_IntParams
        {
            get
            {
                if ((this.mUIT_Plus_IntParams == null))
                {
                    this.mUIT_Plus_IntParams = new UIT_Plus_IntParams();
                }
                return this.mUIT_Plus_IntParams;
            }
        }

        public virtual UIT_SignField_ExcParams UIT_SignField_ExcParams
        {
            get
            {
                if ((this.mUIT_SignField_ExcParams == null))
                {
                    this.mUIT_SignField_ExcParams = new UIT_SignField_ExcParams();
                }
                return this.mUIT_SignField_ExcParams;
            }
        }

        public virtual VerifyResult_Div_FloatExpectedValues VerifyResult_Div_FloatExpectedValues
        {
            get
            {
                if ((this.mVerifyResult_Div_FloatExpectedValues == null))
                {
                    this.mVerifyResult_Div_FloatExpectedValues = new VerifyResult_Div_FloatExpectedValues();
                }
                return this.mVerifyResult_Div_FloatExpectedValues;
            }
        }

        public virtual VerifyResult_Div_IntExpectedValues VerifyResult_Div_IntExpectedValues
        {
            get
            {
                if ((this.mVerifyResult_Div_IntExpectedValues == null))
                {
                    this.mVerifyResult_Div_IntExpectedValues = new VerifyResult_Div_IntExpectedValues();
                }
                return this.mVerifyResult_Div_IntExpectedValues;
            }
        }

        public virtual VerifyResult_Minus_FloatExpectedValues VerifyResult_Minus_FloatExpectedValues
        {
            get
            {
                if ((this.mVerifyResult_Minus_FloatExpectedValues == null))
                {
                    this.mVerifyResult_Minus_FloatExpectedValues = new VerifyResult_Minus_FloatExpectedValues();
                }
                return this.mVerifyResult_Minus_FloatExpectedValues;
            }
        }

        public virtual VerifyResult_Minus_IntExpectedValues VerifyResult_Minus_IntExpectedValues
        {
            get
            {
                if ((this.mVerifyResult_Minus_IntExpectedValues == null))
                {
                    this.mVerifyResult_Minus_IntExpectedValues = new VerifyResult_Minus_IntExpectedValues();
                }
                return this.mVerifyResult_Minus_IntExpectedValues;
            }
        }

        public virtual VerifyResult_Mul_FloatExpectedValues VerifyResult_Mul_FloatExpectedValues
        {
            get
            {
                if ((this.mVerifyResult_Mul_FloatExpectedValues == null))
                {
                    this.mVerifyResult_Mul_FloatExpectedValues = new VerifyResult_Mul_FloatExpectedValues();
                }
                return this.mVerifyResult_Mul_FloatExpectedValues;
            }
        }

        public virtual VerifyResult_Mul_IntExpectedValues VerifyResult_Mul_IntExpectedValues
        {
            get
            {
                if ((this.mVerifyResult_Mul_IntExpectedValues == null))
                {
                    this.mVerifyResult_Mul_IntExpectedValues = new VerifyResult_Mul_IntExpectedValues();
                }
                return this.mVerifyResult_Mul_IntExpectedValues;
            }
        }

        public virtual VerifyResult_Plus_FloatExpectedValues VerifyResult_Plus_FloatExpectedValues
        {
            get
            {
                if ((this.mVerifyResult_Plus_FloatExpectedValues == null))
                {
                    this.mVerifyResult_Plus_FloatExpectedValues = new VerifyResult_Plus_FloatExpectedValues();
                }
                return this.mVerifyResult_Plus_FloatExpectedValues;
            }
        }

        public virtual VerifyResult_Plus_IntExpectedValues VerifyResult_Plus_IntExpectedValues
        {
            get
            {
                if ((this.mVerifyResult_Plus_IntExpectedValues == null))
                {
                    this.mVerifyResult_Plus_IntExpectedValues = new VerifyResult_Plus_IntExpectedValues();
                }
                return this.mVerifyResult_Plus_IntExpectedValues;
            }
        }

        public UICalculatorWindow UICalculatorWindow
        {
            get
            {
                if ((this.mUICalculatorWindow == null))
                {
                    this.mUICalculatorWindow = new UICalculatorWindow();
                }
                return this.mUICalculatorWindow;
            }
        }

        public UICalculatorWindow1 UICalculatorWindow1
        {
            get
            {
                if ((this.mUICalculatorWindow1 == null))
                {
                    this.mUICalculatorWindow1 = new UICalculatorWindow1();
                }
                return this.mUICalculatorWindow1;
            }
        }
        #endregion

        #region Fields
        private UIT_Div_FloatParams mUIT_Div_FloatParams;

        private UIT_Div_IntParams mUIT_Div_IntParams;

        private UIT_LettersInField_ExcParams mUIT_LettersInField_ExcParams;

        private UIT_Minus_FloatParams mUIT_Minus_FloatParams;

        private UIT_Minus_IntParams mUIT_Minus_IntParams;

        private UIT_Mul_FloatParams mUIT_Mul_FloatParams;

        private UIT_Mul_IntParams mUIT_Mul_IntParams;

        private UIT_Plus_FloatParams mUIT_Plus_FloatParams;

        private UIT_Plus_IntParams mUIT_Plus_IntParams;

        private UIT_SignField_ExcParams mUIT_SignField_ExcParams;

        private VerifyResult_Div_FloatExpectedValues mVerifyResult_Div_FloatExpectedValues;

        private VerifyResult_Div_IntExpectedValues mVerifyResult_Div_IntExpectedValues;

        private VerifyResult_Minus_FloatExpectedValues mVerifyResult_Minus_FloatExpectedValues;

        private VerifyResult_Minus_IntExpectedValues mVerifyResult_Minus_IntExpectedValues;

        private VerifyResult_Mul_FloatExpectedValues mVerifyResult_Mul_FloatExpectedValues;

        private VerifyResult_Mul_IntExpectedValues mVerifyResult_Mul_IntExpectedValues;

        private VerifyResult_Plus_FloatExpectedValues mVerifyResult_Plus_FloatExpectedValues;

        private VerifyResult_Plus_IntExpectedValues mVerifyResult_Plus_IntExpectedValues;

        private UICalculatorWindow mUICalculatorWindow;

        private UICalculatorWindow1 mUICalculatorWindow1;
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "UIT_Div_Float"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIT_Div_FloatParams
    {

        #region Fields
        /// <summary>
        /// Тип "256,256" в "TB_FirstOperand" надпись
        /// </summary>
        public string UITB_FirstOperandEditText = "256,256";

        /// <summary>
        /// Тип "/" в "TB_Operation" надпись
        /// </summary>
        public string UITB_OperationEditText = "/";

        /// <summary>
        /// Тип "64" в "TB_SecondOperand" надпись
        /// </summary>
        public string UITB_SecondOperandEditText = "64";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "UIT_Div_Int"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIT_Div_IntParams
    {

        #region Fields
        /// <summary>
        /// Тип "256" в "TB_FirstOperand" надпись
        /// </summary>
        public string UITB_FirstOperandEditText = "256";

        /// <summary>
        /// Тип "/" в "TB_Operation" надпись
        /// </summary>
        public string UITB_OperationEditText = "/";

        /// <summary>
        /// Тип "64" в "TB_SecondOperand" надпись
        /// </summary>
        public string UITB_SecondOperandEditText = "64";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "UIT_LettersInField_Exc"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIT_LettersInField_ExcParams
    {

        #region Fields
        /// <summary>
        /// Тип "asd" в "TB_FirstOperand" надпись
        /// </summary>
        public string UITB_FirstOperandEditText = "asd";

        /// <summary>
        /// Тип "+" в "TB_Operation" надпись
        /// </summary>
        public string UITB_OperationEditText = "+";

        /// <summary>
        /// Тип "123" в "TB_SecondOperand" надпись
        /// </summary>
        public string UITB_SecondOperandEditText = "123";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "UIT_Minus_Float"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIT_Minus_FloatParams
    {

        #region Fields
        /// <summary>
        /// Тип "8,9" в "TB_FirstOperand" надпись
        /// </summary>
        public string UITB_FirstOperandEditText = "8,9";

        /// <summary>
        /// Тип "-" в "TB_Operation" надпись
        /// </summary>
        public string UITB_OperationEditText = "-";

        /// <summary>
        /// Тип "0,23" в "TB_SecondOperand" надпись
        /// </summary>
        public string UITB_SecondOperandEditText = "0,23";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "UIT_Minus_Int"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIT_Minus_IntParams
    {

        #region Fields
        /// <summary>
        /// Тип "86" в "TB_FirstOperand" надпись
        /// </summary>
        public string UITB_FirstOperandEditText = "86";

        /// <summary>
        /// Тип "-" в "TB_Operation" надпись
        /// </summary>
        public string UITB_OperationEditText = "-";

        /// <summary>
        /// Тип "23" в "TB_SecondOperand" надпись
        /// </summary>
        public string UITB_SecondOperandEditText = "23";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "UIT_Mul_Float"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIT_Mul_FloatParams
    {

        #region Fields
        /// <summary>
        /// Тип "1,7" в "TB_FirstOperand" надпись
        /// </summary>
        public string UITB_FirstOperandEditText = "1,7";

        /// <summary>
        /// Тип "*" в "TB_Operation" надпись
        /// </summary>
        public string UITB_OperationEditText = "*";

        /// <summary>
        /// Тип "0,3" в "TB_SecondOperand" надпись
        /// </summary>
        public string UITB_SecondOperandEditText = "0,3";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "UIT_Mul_Int"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIT_Mul_IntParams
    {

        #region Fields
        /// <summary>
        /// Тип "17" в "TB_FirstOperand" надпись
        /// </summary>
        public string UITB_FirstOperandEditText = "17";

        /// <summary>
        /// Тип "*" в "TB_Operation" надпись
        /// </summary>
        public string UITB_OperationEditText = "*";

        /// <summary>
        /// Тип "3" в "TB_SecondOperand" надпись
        /// </summary>
        public string UITB_SecondOperandEditText = "3";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "UIT_Plus_Float"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIT_Plus_FloatParams
    {

        #region Fields
        /// <summary>
        /// Тип "12,3" в "TB_FirstOperand" надпись
        /// </summary>
        public string UITB_FirstOperandEditText = "12,3";

        /// <summary>
        /// Тип "+" в "TB_Operation" надпись
        /// </summary>
        public string UITB_OperationEditText = "+";

        /// <summary>
        /// Тип "1,23" в "TB_SecondOperand" надпись
        /// </summary>
        public string UITB_SecondOperandEditText = "1,23";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "UIT_Plus_Int"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIT_Plus_IntParams
    {

        #region Fields
        /// <summary>
        /// Тип "123" в "TB_FirstOperand" надпись
        /// </summary>
        public string UITB_FirstOperandEditText = "123";

        /// <summary>
        /// Тип "+" в "TB_Operation" надпись
        /// </summary>
        public string UITB_OperationEditText = "+";

        /// <summary>
        /// Тип "123" в "TB_SecondOperand" надпись
        /// </summary>
        public string UITB_SecondOperandEditText = "123";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "UIT_SignField_Exc"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIT_SignField_ExcParams
    {

        #region Fields
        /// <summary>
        /// Тип "123" в "TB_FirstOperand" надпись
        /// </summary>
        public string UITB_FirstOperandEditText = "123";

        /// <summary>
        /// Тип "%" в "TB_Operation" надпись
        /// </summary>
        public string UITB_OperationEditText = "%";

        /// <summary>
        /// Тип "123" в "TB_SecondOperand" надпись
        /// </summary>
        public string UITB_SecondOperandEditText = "123";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "VerifyResult_Div_Float"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class VerifyResult_Div_FloatExpectedValues
    {

        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TB_Result" надпись равняется "4,004"
        /// </summary>
        public string UITB_ResultEditText = "4,004";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "VerifyResult_Div_Int"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class VerifyResult_Div_IntExpectedValues
    {

        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TB_Result" надпись равняется "4"
        /// </summary>
        public string UITB_ResultEditText = "4";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "VerifyResult_Minus_Float"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class VerifyResult_Minus_FloatExpectedValues
    {

        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TB_Result" надпись равняется "8,67"
        /// </summary>
        public string UITB_ResultEditText = "8,67";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "VerifyResult_Minus_Int"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class VerifyResult_Minus_IntExpectedValues
    {

        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TB_Result" надпись равняется "63"
        /// </summary>
        public string UITB_ResultEditText = "63";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "VerifyResult_Mul_Float"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class VerifyResult_Mul_FloatExpectedValues
    {

        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TB_Result" надпись равняется "0,51"
        /// </summary>
        public string UITB_ResultEditText = "0,51";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "VerifyResult_Mul_Int"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class VerifyResult_Mul_IntExpectedValues
    {

        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TB_Result" надпись равняется "51"
        /// </summary>
        public string UITB_ResultEditText = "51";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "VerifyResult_Plus_Float"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class VerifyResult_Plus_FloatExpectedValues
    {

        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TB_Result" надпись равняется "13,53"
        /// </summary>
        public string UITB_ResultEditText = "13,53";
        #endregion
    }

    /// <summary>
    /// Параметры для передачи в "VerifyResult_Plus_Int"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class VerifyResult_Plus_IntExpectedValues
    {

        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "TB_Result" надпись равняется "246"
        /// </summary>
        public string UITB_ResultEditText = "246";
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UICalculatorWindow : WinWindow
    {

        public UICalculatorWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Calculator";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Calculator");
            #endregion
        }

        #region Properties
        public UITB_FirstOperandWindow UITB_FirstOperandWindow
        {
            get
            {
                if ((this.mUITB_FirstOperandWindow == null))
                {
                    this.mUITB_FirstOperandWindow = new UITB_FirstOperandWindow(this);
                }
                return this.mUITB_FirstOperandWindow;
            }
        }

        public UITB_OperationWindow UITB_OperationWindow
        {
            get
            {
                if ((this.mUITB_OperationWindow == null))
                {
                    this.mUITB_OperationWindow = new UITB_OperationWindow(this);
                }
                return this.mUITB_OperationWindow;
            }
        }

        public UITB_SecondOperandWindow UITB_SecondOperandWindow
        {
            get
            {
                if ((this.mUITB_SecondOperandWindow == null))
                {
                    this.mUITB_SecondOperandWindow = new UITB_SecondOperandWindow(this);
                }
                return this.mUITB_SecondOperandWindow;
            }
        }

        public UICalculateWindow UICalculateWindow
        {
            get
            {
                if ((this.mUICalculateWindow == null))
                {
                    this.mUICalculateWindow = new UICalculateWindow(this);
                }
                return this.mUICalculateWindow;
            }
        }

        public UITB_ResultWindow UITB_ResultWindow
        {
            get
            {
                if ((this.mUITB_ResultWindow == null))
                {
                    this.mUITB_ResultWindow = new UITB_ResultWindow(this);
                }
                return this.mUITB_ResultWindow;
            }
        }
        #endregion

        #region Fields
        private UITB_FirstOperandWindow mUITB_FirstOperandWindow;

        private UITB_OperationWindow mUITB_OperationWindow;

        private UITB_SecondOperandWindow mUITB_SecondOperandWindow;

        private UICalculateWindow mUICalculateWindow;

        private UITB_ResultWindow mUITB_ResultWindow;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UITB_FirstOperandWindow : WinWindow
    {

        public UITB_FirstOperandWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TB_FirstOperand";
            this.WindowTitles.Add("Calculator");
            #endregion
        }

        #region Properties
        public WinEdit UITB_FirstOperandEdit
        {
            get
            {
                if ((this.mUITB_FirstOperandEdit == null))
                {
                    this.mUITB_FirstOperandEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITB_FirstOperandEdit.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUITB_FirstOperandEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITB_FirstOperandEdit;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UITB_OperationWindow : WinWindow
    {

        public UITB_OperationWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TB_Operation";
            this.WindowTitles.Add("Calculator");
            #endregion
        }

        #region Properties
        public WinEdit UITB_OperationEdit
        {
            get
            {
                if ((this.mUITB_OperationEdit == null))
                {
                    this.mUITB_OperationEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITB_OperationEdit.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUITB_OperationEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITB_OperationEdit;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UITB_SecondOperandWindow : WinWindow
    {

        public UITB_SecondOperandWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TB_SecondOperand";
            this.WindowTitles.Add("Calculator");
            #endregion
        }

        #region Properties
        public WinEdit UITB_SecondOperandEdit
        {
            get
            {
                if ((this.mUITB_SecondOperandEdit == null))
                {
                    this.mUITB_SecondOperandEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITB_SecondOperandEdit.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUITB_SecondOperandEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITB_SecondOperandEdit;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UICalculateWindow : WinWindow
    {

        public UICalculateWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "B_Calculate";
            this.WindowTitles.Add("Calculator");
            #endregion
        }

        #region Properties
        public WinButton UICalculateButton
        {
            get
            {
                if ((this.mUICalculateButton == null))
                {
                    this.mUICalculateButton = new WinButton(this);
                    #region Условия поиска
                    this.mUICalculateButton.SearchProperties[WinButton.PropertyNames.Name] = "Calculate";
                    this.mUICalculateButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUICalculateButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUICalculateButton;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UITB_ResultWindow : WinWindow
    {

        public UITB_ResultWindow(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TB_Result";
            this.WindowTitles.Add("Calculator");
            #endregion
        }

        #region Properties
        public WinEdit UITB_ResultEdit
        {
            get
            {
                if ((this.mUITB_ResultEdit == null))
                {
                    this.mUITB_ResultEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITB_ResultEdit.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUITB_ResultEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITB_ResultEdit;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UICalculatorWindow1 : WinWindow
    {

        public UICalculatorWindow1()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Calculator";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Calculator");
            #endregion
        }

        #region Properties
        public UICalculatorClient UICalculatorClient
        {
            get
            {
                if ((this.mUICalculatorClient == null))
                {
                    this.mUICalculatorClient = new UICalculatorClient(this);
                }
                return this.mUICalculatorClient;
            }
        }
        #endregion

        #region Fields
        private UICalculatorClient mUICalculatorClient;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UICalculatorClient : WinClient
    {

        public UICalculatorClient(UITestControl searchLimitContainer) :
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinControl.PropertyNames.Name] = "Calculator";
            this.WindowTitles.Add("Calculator");
            #endregion
        }

        #region Properties
        public WinButton UIПродолжитьButton
        {
            get
            {
                if ((this.mUIПродолжитьButton == null))
                {
                    this.mUIПродолжитьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIПродолжитьButton.SearchProperties[WinButton.PropertyNames.Name] = "Продолжить";
                    this.mUIПродолжитьButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIПродолжитьButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIПродолжитьButton;
        #endregion
    }
}
